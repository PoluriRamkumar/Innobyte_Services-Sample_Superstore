Code cell <tl6Bl59kZZzr>
# %% [code]
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')
from scipy import stats
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.pipeline import Pipeline
from sklearn.metrics import r2_score, mean_squared_error
import time

Text cell <AMzOEzN4akS2>
# %% [markdown]
# **Data Exploration**

Text cell <o1CGjw_baqg6>
# %% [markdown]
### **Loading the dataset**

Code cell <S4gngvNtZzNJ>
# %% [code]
df=pd.read_csv("SampleSuperstore.csv")

Code cell <qp-tJBwHZ6H6>
# %% [code]
df.head()
Execution output from Apr 21, 2024 2:24 PM
15KB
	text/plain
		Ship Mode    Segment        Country             City       State  \
		0    Second Class   Consumer  United States        Henderson    Kentucky   
		1    Second Class   Consumer  United States        Henderson    Kentucky   
		2    Second Class  Corporate  United States      Los Angeles  California   
		3  Standard Class   Consumer  United States  Fort Lauderdale     Florida   
		4  Standard Class   Consumer  United States  Fort Lauderdale     Florida   
		
		   Postal Code Region         Category Sub-Category     Sales  Quantity  \
		0        42420  South        Furniture    Bookcases  261.9600         2   
		1        42420  South        Furniture       Chairs  731.9400         3   
		2        90036   West  Office Supplies       Labels   14.6200         2   
		3        33311  South        Furniture       Tables  957.5775         5   
		4        33311  South  Office Supplies      Storage   22.3680         2   
		
		   Discount    Profit  
		0      0.00   41.9136  
		1      0.00  219.5820  
		2      0.00    6.8714  
		3      0.45 -383.0310  
		4      0.20    2.5164

Code cell <yGg0_Bfva4xt>
# %% [code]
df.shape
Execution output from Apr 21, 2024 2:24 PM
0KB
	text/plain
		(9994, 13)

Text cell <4kcgSmYWbkev>
# %% [markdown]
### **Columns in Dataset**

Code cell <woxx3mTRbKwA>
# %% [code]
df.columns
Execution output from Apr 21, 2024 2:24 PM
0KB
	text/plain
		Index(['Ship Mode', 'Segment', 'Country', 'City', 'State', 'Postal Code',
		       'Region', 'Category', 'Sub-Category', 'Sales', 'Quantity', 'Discount',
		       'Profit'],
		      dtype='object')

Code cell <ubZ8u9JybuLW>
# %% [code]
df.dtypes
Execution output from Apr 21, 2024 2:24 PM
0KB
	text/plain
		Ship Mode        object
		Segment          object
		Country          object
		City             object
		State            object
		Postal Code       int64
		Region           object
		Category         object
		Sub-Category     object
		Sales           float64
		Quantity          int64
		Discount        float64
		Profit          float64
		dtype: object

Code cell <TFxg_4WPbwo6>
# %% [code]
df.info()
Execution output from Apr 21, 2024 2:24 PM
1KB
	Stream
		<class 'pandas.core.frame.DataFrame'>
		RangeIndex: 9994 entries, 0 to 9993
		Data columns (total 13 columns):
		 #   Column        Non-Null Count  Dtype  
		---  ------        --------------  -----  
		 0   Ship Mode     9994 non-null   object 
		 1   Segment       9994 non-null   object 
		 2   Country       9994 non-null   object 
		 3   City          9994 non-null   object 
		 4   State         9994 non-null   object 
		 5   Postal Code   9994 non-null   int64  
		 6   Region        9994 non-null   object 
		 7   Category      9994 non-null   object 
		 8   Sub-Category  9994 non-null   object 
		 9   Sales         9994 non-null   float64
		 10  Quantity      9994 non-null   int64  
		 11  Discount      9994 non-null   float64
		 12  Profit        9994 non-null   float64
		dtypes: float64(3), int64(2), object(8)
		memory usage: 1015.1+ KB

Text cell <5u4qEUQ8b2zT>
# %% [markdown]
# **Data Cleaning and preprocessing**

Text cell <DsknSF7bb_V_>
# %% [markdown]
Handling Null Values and Duplicates

Code cell <XbrFrYlocFT8>
# %% [code]
#Checking for null values
df.isnull().sum()
Execution output from Apr 21, 2024 2:25 PM
0KB
	text/plain
		Ship Mode       0
		Segment         0
		Country         0
		City            0
		State           0
		Postal Code     0
		Region          0
		Category        0
		Sub-Category    0
		Sales           0
		Quantity        0
		Discount        0
		Profit          0
		dtype: int64

Text cell <6FXYW6HIcRrj>
# %% [markdown]
**Observation : No Missing Values find**

Code cell <jrmlE2wncbTx>
# %% [code]
#checking for duplicates value

df.duplicated().sum()
Execution output from Apr 21, 2024 2:25 PM
0KB
	text/plain
		17

Code cell <fXd-f5o-ckMt>
# %% [code]
# Removing duplicate values
df.drop_duplicates(inplace=True)

Code cell <yz_3tB9Ncshs>
# %% [code]
df
Execution output from Apr 21, 2024 2:25 PM
21KB
	text/plain
		Ship Mode    Segment        Country             City       State  \
		0       Second Class   Consumer  United States        Henderson    Kentucky   
		1       Second Class   Consumer  United States        Henderson    Kentucky   
		2       Second Class  Corporate  United States      Los Angeles  California   
		3     Standard Class   Consumer  United States  Fort Lauderdale     Florida   
		4     Standard Class   Consumer  United States  Fort Lauderdale     Florida   
		...              ...        ...            ...              ...         ...   
		9989    Second Class   Consumer  United States            Miami     Florida   
		9990  Standard Class   Consumer  United States       Costa Mesa  California   
		9991  Standard Class   Consumer  United States       Costa Mesa  California   
		9992  Standard Class   Consumer  United States       Costa Mesa  California   
		9993    Second Class   Consumer  United States      Westminster  California   
		
		      Postal Code Region         Category Sub-Category     Sales  Quantity  \
		0           42420  South        Furniture    Bookcases  261.9600         2   
		1           42420  South        Furniture       Chairs  731.9400         3   
		2           90036   West  Office Supplies       Labels   14.6200         2   
		3           33311  South        Furniture       Tables  957.5775         5   
		4           33311  South  Office Supplies      Storage   22.3680         2   
		...           ...    ...              ...          ...       ...       ...   
		9989        33180  South        Furniture  Furnishings   25.2480         3   
		9990        92627   West        Furniture  Furnishings   91.9600         2   
		9991        92627   West       Technology       Phones  258.5760         2   
		9992        92627   West  Office Supplies        Paper   29.6000         4   
		9993        92683   West  Office Supplies   Appliances  243.1600         2   
		
		      Discount    Profit  
		0         0.00   41.9136  
		1         0.00  219.5820  
		2         0.00    6.8714  
		3         0.45 -383.0310  
		4         0.20    2.5164  
		...        ...       ...  
		9989      0.20    4.1028  
		9990      0.00   15.6332  
		9991      0.20   19.3932  
		9992      0.00   13.3200  
		9993      0.00   72.9480  
		
		[9977 rows x 13 columns]

Code cell <quY6cX0acyoV>
# %% [code]
df.shape
Execution output from Apr 21, 2024 2:25 PM
0KB
	text/plain
		(9977, 13)

Code cell <5cC1ZwLmc0UI>
# %% [code]
df.duplicated().sum()
Execution output from Apr 21, 2024 2:25 PM
0KB
	text/plain
		0

Text cell <DoJ3dtrCc6N8>
# %% [markdown]
# **Statistical Summary of data**

Code cell <C-a46YD-c49S>
# %% [code]
df.describe()
Execution output from Apr 21, 2024 2:25 PM
12KB
	text/plain
		Postal Code         Sales     Quantity     Discount      Profit
		count   9977.000000   9977.000000  9977.000000  9977.000000  9977.00000
		mean   55154.964117    230.148902     3.790719     0.156278    28.69013
		std    32058.266816    623.721409     2.226657     0.206455   234.45784
		min     1040.000000      0.444000     1.000000     0.000000 -6599.97800
		25%    23223.000000     17.300000     2.000000     0.000000     1.72620
		50%    55901.000000     54.816000     3.000000     0.200000     8.67100
		75%    90008.000000    209.970000     5.000000     0.200000    29.37200
		max    99301.000000  22638.480000    14.000000     0.800000  8399.97600

Text cell <aKij5RVWdJWz>
# %% [markdown]
**Describe method shows**

Text cell <dpOcm0HFdSN1>
# %% [markdown]
There are 9977 records (sales)

Text cell <eucxCIt_dl4J>
# %% [markdown]
Sales values are in the range of 0.444000 to 22638.480000 with average 230.77 and standard deviation of 623.72

Code cell <1gYYucxPfrP->
# %% [code]
df.describe(include="object")
Execution output from Apr 21, 2024 2:25 PM
12KB
	text/plain
		Ship Mode   Segment        Country           City       State  \
		count             9977      9977           9977           9977        9977   
		unique               4         3              1            531          49   
		top     Standard Class  Consumer  United States  New York City  California   
		freq              5955      5183           9977            914        1996   
		
		       Region         Category Sub-Category  
		count    9977             9977         9977  
		unique      4                3           17  
		top      West  Office Supplies      Binders  
		freq     3193             6012         1522

Text cell <f3cKgssJf2FL>
# %% [markdown]
# **Exploring Unique values**

Code cell <DPpLoR6Uf6_f>
# %% [code]
df.nunique()
Execution output from Apr 21, 2024 2:25 PM
0KB
	text/plain
		Ship Mode          4
		Segment            3
		Country            1
		City             531
		State             49
		Postal Code      631
		Region             4
		Category           3
		Sub-Category      17
		Sales           5825
		Quantity          14
		Discount          12
		Profit          7287
		dtype: int64

Text cell <TG_lrPVFf_3S>
# %% [markdown]
**Let's see how many unique values in each of State, Category, Sub-Category, and Ship Mode**

Code cell <vYZft3ANgH4M>
# %% [code]
print('* There are stores in {} states'.format(len(df['State'].unique())))

print('* There are {} different categories'.format(len(df['Category'].unique())))

print('* There are {} different sub categories'.format(len(df['Sub-Category'].unique())))

print('* There are {} different ship mode'.format(len(df['Ship Mode'].unique())))
Execution output from Apr 21, 2024 2:25 PM
0KB
	Stream
		* There are stores in 49 states
		* There are 3 different categories
		* There are 17 different sub categories
		* There are 4 different ship mode

Code cell <1Hdr750xgOjD>
# %% [code]
# Total sales and Profit
print('Total profit of the superstore:',df['Profit'].sum())
print('Total sales of the superstore:',df['Sales'].sum())
Execution output from Apr 21, 2024 2:25 PM
0KB
	Stream
		Total profit of the superstore: 286241.4226
		Total sales of the superstore: 2296195.5903

Text cell <rLRfX3nCgtSO>
# %% [markdown]
# **Customer Segmentation**

Code cell <k3hgNuf6g1_d>
# %% [code]
# Types of unique values in segment
df['Segment'].unique()
Execution output from Apr 21, 2024 2:25 PM
0KB
	text/plain
		array(['Consumer', 'Corporate', 'Home Office'], dtype=object)

Code cell <tmsE4Cfig5V8>
# %% [code]
# No. of unique values in each segment
df['Segment'].value_counts()
Execution output from Apr 21, 2024 2:25 PM
0KB
	text/plain
		Segment
		Consumer       5183
		Corporate      3015
		Home Office    1779
		Name: count, dtype: int64

Code cell <KXDqxNTehIdq>
# %% [code]
df['Segment'].value_counts().plot(kind='pie', autopct = '%1.2f%%', colors = ['#ff9999','#66b3ff','#99ff99'])
Execution output from Apr 21, 2024 2:26 PM
23KB
	text/plain
		<Axes: ylabel='count'>
		<Figure size 640x480 with 1 Axes>

Text cell <Tn1BYrefhUQm>
# %% [markdown]
**Observation:**

Text cell <ASp_Y7pohYX8>
# %% [markdown]
Around 50% of customers in the dataset are classified as consumers, indicating a significant portion of individual buyers among the customer base.

Code cell <0I__z8NlhfGr>
# %% [code]
plt.figure(facecolor='violet')
plt.title('Customer segment based on region')
sns.countplot(x='Segment',data=df,hue='Region')
Execution output from Apr 21, 2024 2:26 PM
34KB
	text/plain
		<Axes: title={'center': 'Customer segment based on region'}, xlabel='Segment', ylabel='count'>
		<Figure size 640x480 with 1 Axes>

Code cell <k3nvGfndhons>
# %% [code]
df['Ship Mode'].unique()
Execution output from Apr 21, 2024 2:26 PM
0KB
	text/plain
		array(['Second Class', 'Standard Class', 'First Class', 'Same Day'],
		      dtype=object)

Code cell <sM83Sh5Ehs74>
# %% [code]
df['Ship Mode'].value_counts()
Execution output from Apr 21, 2024 2:26 PM
0KB
	text/plain
		Ship Mode
		Standard Class    5955
		Second Class      1943
		First Class       1537
		Same Day           542
		Name: count, dtype: int64

Code cell <29X3czwjhxxv>
# %% [code]
sns.countplot(data=df,x='Ship Mode',palette=['#a1c9f4', '#8de5a1', '#ff9f9b', '#d0bbff'])
plt.show()
Execution output from Apr 21, 2024 2:26 PM
21KB
	text/plain
		<Figure size 640x480 with 1 Axes>

Text cell <pb4i6lrUh0yO>
# %% [markdown]
**Observation :**

Text cell <jCXQzbmeh5CY>
# %% [markdown]
The majority of customers prefer the standard class ship mode compared to other options like first class, second class, or same day.

Text cell <EI_2Z5DYh8N_>
# %% [markdown]
# **Product Analysis**

Text cell <kADrOd00iB6z>
# %% [markdown]
### **Analysis of Order Count Distribution Across Various Categories.**

Code cell <zZ_Q3t-9h71_>
# %% [code]
df['Category'].unique()
Execution output from Apr 21, 2024 2:26 PM
0KB
	text/plain
		array(['Furniture', 'Office Supplies', 'Technology'], dtype=object)

Code cell <tZlgPE-xiL8N>
# %% [code]
df['Category'].value_counts()
Execution output from Apr 21, 2024 2:26 PM
0KB
	text/plain
		Category
		Office Supplies    6012
		Furniture          2118
		Technology         1847
		Name: count, dtype: int64

Code cell <AboWhI6JiSnV>
# %% [code]
df['Category'].value_counts().plot(kind='pie', autopct = '%1.2f%%', colors = ['#ff9999','#66b3ff','#99ff99'])
Execution output from Apr 21, 2024 2:26 PM
23KB
	text/plain
		<Axes: ylabel='count'>
		<Figure size 640x480 with 1 Axes>

Text cell <x-ETeA1DiY8i>
# %% [markdown]
**Observation**

Text cell <PhIRuMNyicmM>
# %% [markdown]
Above 60% of customers in the dataset place orders for office supplies.

Text cell <bvdqdWVgihi5>
# %% [markdown]
### **Distribution of orders count across top 10 states**

Code cell <945McYFP5a7H>
# %% [code]
# prompt: Distribution of orders count across top 10 states

state_order_count = df['State'].value_counts().head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=state_order_count.index, y=state_order_count.values, palette='Set2')
plt.xlabel('State', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.title('Distribution of Orders Count Across Top 10 States', fontsize=14)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

Execution output from Apr 21, 2024 2:42 PM
59KB
	text/plain
		<Figure size 1200x600 with 1 Axes>

Text cell <HpeB_1gpk-Xq>
# %% [markdown]
**Observation :**

Text cell <G-IJsX0clCvg>
# %% [markdown]
The plot above displays the top 10 cities by some metric, where California standing out as having the highest number of order counts.

Text cell <hRXm5uJdlGAU>
# %% [markdown]
# **Analysis of Sales Distribution**

Text cell <VD9JXvIplOvw>
# %% [markdown]
This title conveys that you have conducted an analysis based on the sales column, comparing it with different categories.

Code cell <aQYH4IeQlSHi>
# %% [code]
plt.figure(figsize=(8,5))
sns.barplot(data=df,x="Category",y="Sales",palette=["#FFFF99", "#B19CD9", "#FFDAB9"])

Execution output from Apr 21, 2024 8:26 AM
19KB
	text/plain
		<Axes: xlabel='Category', ylabel='Sales'>
		<Figure size 800x500 with 1 Axes>

Code cell <iUAQNyVIlYBg>
# %% [code]
cat_s=df.groupby("Category")["Sales"].sum().reset_index()
plt.figure(figsize=(8,5))
sns.barplot(data=cat_s,x="Category",y="Sales",palette=["#FFFF99", "#B19CD9", "#FFDAB9"])

for index, row in cat_s.iterrows():
    plt.annotate(f"${row['Sales']:.2f}", (index, row['Sales']), ha='center', va='bottom')

plt.xlabel('Category')
plt.ylabel('Sales')
plt.title('Total Sales by Category')
plt.show()
Execution output from Apr 21, 2024 8:26 AM
37KB
	text/plain
		<Figure size 800x500 with 1 Axes>

Code cell <9puTKWWAlcBy>
# %% [code]
reg_s=df.groupby("Category")["Sales"].sum().reset_index()
sales=reg_s["Sales"].tolist()
category=reg_s["Category"].tolist()


plt.figure(figsize=(8,4))
plt.pie(sales, labels=category,
        autopct='%1.1f%%',
        colors=["#87CEEB", "#FFC0CB", "#B19CD9"],
        shadow=True,
        explode = [0, 0.1, 0],
        startangle=140)
plt.title('Sales Distribution by Category')
plt.axis('equal')
plt.show()
Execution output from Apr 21, 2024 8:26 AM
38KB
	text/plain
		<Figure size 800x400 with 1 Axes>

Text cell <AyjSCZU9lfug>
# %% [markdown]
**Observation**

Text cell <OsijnQJalj9d>
# %% [markdown]
The plot above depicts the sales distribution across different categories, highlighting the Technology as the leader in terms of sales.

Code cell <fvIq72t_lt3R>
# %% [code]
reg_s=df.groupby("Region")["Sales"].sum().reset_index()
sales=reg_s["Sales"].tolist()
regions=reg_s["Region"].tolist()

plt.figure(figsize=(8,4))
plt.pie(sales, labels=regions,
        autopct='%1.1f%%',
        colors=["#87CEEB", "#FFC0CB", "#B19CD9", "#FFDAB9"],
        shadow=True,
        explode = [0, 0.1, 0, 0.1],
        startangle=140)
plt.title('Sales Distribution by Region')
plt.axis('equal')
plt.show()
Execution output from Apr 21, 2024 8:28 AM
45KB
	text/plain
		<Figure size 800x400 with 1 Axes>

Text cell <oGyneLOwl4qS>
# %% [markdown]
**Observation**

Text cell <LcbEHBH1l8vC>
# %% [markdown]
The plot above illustrates the distribution of sales by region. The West region stands out with the highest sales.

Code cell <MpAF2O2nmBrq>
# %% [code]
scat_s=df.groupby("Sub-Category")["Sales"].sum().reset_index()

plt.figure(figsize=(6,8))
sns.barplot(data=scat_s,y="Sub-Category",x="Sales",color="#FFA07A")
plt.xlabel('Sales')
plt.ylabel('Sub-Category')
plt.title('Total Sales by Sub-Category')
plt.show()
Execution output from Apr 21, 2024 8:29 AM
47KB
	text/plain
		<Figure size 600x800 with 1 Axes>

Code cell <0UjME5d5mIeg>
# %% [code]
plt.figure(figsize=(12,10))
df["Sub-Category"].value_counts().plot.pie(autopct="%1.0f%%")
plt.show()
Execution output from Apr 21, 2024 8:30 AM
108KB
	text/plain
		<Figure size 1200x1000 with 1 Axes>

Code cell <cHxFEDLsmbjC>
# %% [code]
sta_s=df.groupby("State")["Sales"].sum().reset_index()
sta_s=sta_s.sort_values(by="Sales")
sta_s=sta_s.tail(10)

sns.barplot(data=sta_s,y="State",x="Sales",color="seagreen")
plt.xlabel('Sales')
plt.ylabel('State')
plt.title('Top 10 States by Sales')
plt.show()
Execution output from Apr 21, 2024 8:31 AM
29KB
	text/plain
		<Figure size 640x480 with 1 Axes>

Text cell <ssMeFj8emmwr>
# %% [markdown]
**Observation**

Text cell <QkGQb9VZmzt8>
# %% [markdown]
The distribution of sales across states reveals a notable disparity, with California and New York leading in sales volume, suggesting strong market presence and economic activity.

Code cell <p_S44Twbmg1R>
# %% [code]
sns.histplot(df['Quantity'], bins=20, kde=True)
plt.title('Distribution of order Quantity')
plt.xlabel('order quantity')
plt.ylabel('frequency')
plt.show()
Execution output from Apr 21, 2024 8:33 AM
38KB
	text/plain
		<Figure size 640x480 with 1 Axes>

Code cell <J2BVG9nOm9Cv>
# %% [code]
count_sub=df.groupby(["Category","Sub-Category"]).size().reset_index(name='Count')
fig = px.bar(count_sub, x='Category', y='Count', color='Sub-Category',
             title='Counts of Sub-Categories within Main Categories',
             labels={'Count': 'Number of Items Sold'},
             barmode='group')
fig.show()
Execution output from Apr 21, 2024 8:33 AM
18KB

Text cell <7c_tGaCdm-Vy>
# %% [markdown]
**Observation**

Text cell <FaqqU1idnNNW>
# %% [markdown]
Here, we can see that throughout the sub-categories the main category of Office Supplies having highest no. of sales distribution.

Code cell <V90acfI4nS1B>
# %% [code]
plt.scatter(df['Sales'],df['Profit'],color='blue')

Execution output from Apr 21, 2024 8:35 AM
23KB
	text/plain
		<matplotlib.collections.PathCollection at 0x7f3a9b6e68c0>
		<Figure size 640x480 with 1 Axes>

Text cell <8IVxXOXanhLI>
# %% [markdown]
# **Profit of sales based on region**

Code cell <fDxIowg0pPFM>
# %% [code]
df.groupby('Region')[['Profit','Sales']].agg(['sum']).plot.bar()
plt.title('Total profit and sales per region')
plt.rcParams['figure.figsize']=[10,8]
plt.show()
Execution output from Apr 21, 2024 8:43 AM
37KB
	text/plain
		<Figure size 1000x800 with 1 Axes>

Text cell <IgzVSmrzpVba>
# %% [markdown]
**Observation**

Text cell <4Q49hM5QpfJg>
# %% [markdown]
The highest profit earn in East and west region and also sales are high no. of sales are belongs to the same region.

Text cell <7SFEkPzFpkIo>
# %% [markdown]
# **Profit of sales based on Sub-Category**

Code cell <nmnl65jtp6uF>
# %% [code]
df.groupby('Sub-Category')[['Profit', 'Sales']].agg(['sum']).plot.bar()
plt.title('Total profit and sales per Sub-Category')
plt.rcParams['figure.figsize'] = [10, 8]
plt.show()

Execution output from Apr 21, 2024 8:46 AM
58KB
	text/plain
		<Figure size 1000x800 with 1 Axes>

Text cell <W6gAlB8tqBWw>
# %% [markdown]
**Observation**

Text cell <BrUdzD70qQ0G>
# %% [markdown]
The Highest profit is earned in copiers while, the selling of phones and chairs are extremely high compared to other products.

Code cell <llATLOgnqX2J>
# %% [code]
cat_s=df.groupby("Category")["Profit"].sum().reset_index()
profit=cat_s["Profit"].tolist()
category=cat_s["Category"].tolist()


plt.figure(figsize=(8,4))
plt.pie(profit, labels=category,
        autopct='%1.1f%%',
        colors=["#87CEEB", "#FFC0CB", "#B19CD9"],
        shadow=True,
        explode = [0, 0.1, 0],
        startangle=140)
plt.title('Profit Distribution by Category')
plt.axis('equal')
plt.show()
Execution output from Apr 21, 2024 8:48 AM
40KB
	text/plain
		<Figure size 800x400 with 1 Axes>

Text cell <P2HBGwjfqdD4>
# %% [markdown]
# **Profit of sales based on Segments**

Code cell <q5nyGvMYqz5r>
# %% [code]
df.groupby('Segment')[['Profit', 'Sales']].agg(['sum']).plot.bar()
plt.title('Total profit and sales per Segment')
plt.rcParams['figure.figsize'] = [10, 8]
plt.show()
Execution output from Apr 21, 2024 8:50 AM
34KB
	text/plain
		<Figure size 1000x800 with 1 Axes>

Code cell <KqxhUwujq_Wf>
# %% [code]
sns.violinplot(x='Profit',data=df)
Execution output from Apr 21, 2024 8:52 AM
20KB
	text/plain
		<Axes: xlabel='Profit'>
		<Figure size 1000x800 with 1 Axes>

Code cell <7kN8TE_4rTwf>
# %% [code]
sns.violinplot(x='Discount',data=df)
Execution output from Apr 21, 2024 8:52 AM
43KB
	text/plain
		<Axes: xlabel='Discount'>
		<Figure size 1000x800 with 1 Axes>

Code cell <o7k3ixq-rWZ3>
# %% [code]
sns.jointplot(data=df,x='Sales',y='Profit')
Execution output from Apr 21, 2024 8:53 AM
34KB
	text/plain
		<seaborn.axisgrid.JointGrid at 0x7f3a99f848e0>
		<Figure size 600x600 with 3 Axes>

Code cell <H-3SG66AzVGx>
# %% [code]
df.corr(numeric_only=True)
Execution output from Apr 21, 2024 2:12 PM
11KB
	text/plain
		Postal Code     Sales  Quantity  Discount    Profit
		Postal Code     1.000000 -0.023854  0.012761  0.058443 -0.029961
		Sales          -0.023854  1.000000  0.200795 -0.028190  0.479064
		Quantity        0.012761  0.200795  1.000000  0.008623  0.066253
		Discount        0.058443 -0.028190  0.008623  1.000000 -0.219487
		Profit         -0.029961  0.479064  0.066253 -0.219487  1.000000

Code cell <wMDv-T8h0-y8>
# %% [code]
fig,axes=plt.subplots(1,1,figsize=(9,6))
sns.heatmap(df.corr(numeric_only=True),annot=True)
plt.show()
Execution output from Apr 21, 2024 2:23 PM
48KB
	text/plain
		<Figure size 900x600 with 2 Axes>

Text cell <zsKlAcO2uCv9>
# %% [markdown]
# **Relation between the customer segment, Product category with the sales**

Code cell <lI86XYiUuBb7>
# %% [code]
grouped_data = df.groupby(['Segment', 'Category'])['Sales'].sum().reset_index()
grouped_data
Execution output from Apr 21, 2024 9:13 AM
13KB
	text/plain
		Segment         Category        Sales
		0     Consumer        Furniture  391049.3120
		1     Consumer  Office Supplies  363952.1360
		2     Consumer       Technology  406399.8970
		3    Corporate        Furniture  229019.7858
		4    Corporate  Office Supplies  230676.4620
		5    Corporate       Technology  246450.1190
		6  Home Office        Furniture  121930.6975
		7  Home Office  Office Supplies  124418.4340
		8  Home Office       Technology  183304.0170

Code cell <tLoPPDF7wGLe>
# %% [code]
pivot_df = grouped_data.pivot(index='Segment', columns='Category', values='Sales')
pivot_df
Execution output from Apr 21, 2024 9:13 AM
12KB
	text/plain
		Category       Furniture  Office Supplies  Technology
		Segment                                              
		Consumer     391049.3120       363952.136  406399.897
		Corporate    229019.7858       230676.462  246450.119
		Home Office  121930.6975       124418.434  183304.017

Code cell <KBfHD6Y1wKFe>
# %% [code]
plt.figure(figsize=(10, 6))
sns.heatmap(pivot_df, annot=True, fmt=".2f", cmap="YlGnBu")
plt.title('Relationship between Customer Segment, Product Category, and Sales')
plt.xlabel('Product Category')
plt.ylabel('Customer Segment')
plt.show()
Execution output from Apr 21, 2024 9:13 AM
66KB
	text/plain
		<Figure size 1000x600 with 2 Axes>

Code cell <HbrCBZriwaJr>
# %% [code]
sns.pairplot(df)
Execution output from Apr 21, 2024 9:15 AM
336KB
	text/plain
		<seaborn.axisgrid.PairGrid at 0x7f3a9279e6e0>
		<Figure size 1250x1250 with 30 Axes>

Code cell <ER5sTZ2CwiQT>
# %% [code]
fig,axes=plt.subplots(figsize=(10,10))
sns.boxplot(df['Sales'])
fig,axes=plt.subplots(figsize=(10,10))
sns.boxplot(df['Discount'])
fig,axes=plt.subplots(figsize=(10,10))
sns.boxplot(df['Profit'])
Execution output from Apr 21, 2024 9:16 AM
69KB
	text/plain
		<Axes: ylabel='Profit'>
		<Figure size 1000x1000 with 1 Axes>
		<Figure size 1000x1000 with 1 Axes>
		<Figure size 1000x1000 with 1 Axes>

Text cell <rnP7DFLrw9RF>
# %% [markdown]
# **Sales Statistical Data**

Code cell <U_rlM3H4w6aF>
# %% [code]
print(df['Sales'].describe())
plt.figure(figsize=(9,8))
plt.grid()
sns.distplot(df['Sales'],color='b',bins=100,hist_kws={'alpha':0.4})
Execution output from Apr 21, 2024 9:18 AM
32KB
	Stream
		count     9994.000000
		mean       229.858001
		std        623.245101
		min          0.444000
		25%         17.280000
		50%         54.490000
		75%        209.940000
		max      22638.480000
		Name: Sales, dtype: float64
	text/plain
		<Axes: xlabel='Sales', ylabel='Density'>
		<Figure size 900x800 with 1 Axes>

Code cell <FrMs1PhixUZv>
# %% [code]
df['Sales_log'] = np.log(df['Sales'])

Code cell <xBJq1J0VxmxG>
# %% [code]
fig = plt.figure(figsize=(12,4))
ax1 = fig.add_subplot(121)
stats.probplot(df['Sales'], dist="norm", plot=ax1)
ax1.set_title('Outliers before Log transformation')
ax2 = fig.add_subplot(122)
stats.probplot(df['Sales_log'],dist="norm", plot=ax2)
ax2.set_title('Outliers after Log transformation')
plt.show()
Execution output from Apr 21, 2024 9:20 AM
51KB
	text/plain
		<Figure size 1200x400 with 2 Axes>

Text cell <0Pfh0j1-xwYW>
# %% [markdown]
# **Conclusion**

Text cell <6U-vpiVfx17c>
# %% [markdown]
 ▶
West and East regions are most profitable, with New York and California being the most profitable states.

Text cell <gZ8pV0P4x1rT>
# %% [markdown]
▶
Highest product category: technology, furniture, and office suppliers.

Text cell <1GyVL1VRx1eR>
# %% [markdown]
▶
South and Central regions have less profit.

Text cell <2FaJAAzVx1Qk>
# %% [markdown]
▶ Highest profit earned in copiers.

Text cell <71mMXaHUx01->
# %% [markdown]
▶  Highest sales of phones and chairs.

Text cell <Y6b_DzZEx0nJ>
# %% [markdown]
▶ No or very little profit in sales of supplies

Text cell <rbftTWd0x0Ma>
# %% [markdown]
▶ Profit from copiers is more.

Text cell <lQA3Nsbk1Mrx>
# %% [markdown]
▶ Total sum of profit from table sales is negative.

Text cell <hrYvEL8u1OeX>
# %% [markdown]
▶ Negative correlation between profit and discount.

Text cell <voJJFPez1dWl>
# %% [markdown]
# **THANK YOU**


